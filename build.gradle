import java.util.concurrent.TimeUnit

import static java.util.concurrent.TimeUnit.SECONDS

buildscript {
	ext {
		kotlinVersion = '1.2.20'
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'pl.grzeslowski'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

ext {
	reactorVersion = "3.1.1.RELEASE"
	junit = '5.1.1'
}

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
	compile group: 'io.netty', name: 'netty-all', version: '4.1.24.Final'
	compile "io.projectreactor:reactor-core:$reactorVersion"

	compileOnly "org.springframework.boot:spring-boot-configuration-processor"

	testCompile "org.junit.jupiter:junit-jupiter-engine:$junit"
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("io.projectreactor:reactor-test:$reactorVersion")

	testImplementation("org.junit.jupiter:junit-jupiter-api:$junit")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit")
}

test {
	useJUnitPlatform()
}

task("acceptanceTest") {
	doLast {
		def serverProc
		final server = new Thread({
			println " > starting server"
			serverProc = "java -jar $jar.archivePath.absolutePath".execute()
		})
		server.setDaemon(true)
		server.start()
		println " > sleeping"
		SECONDS.sleep(30)

		println " > starting test"
		final proc = "java -jar testclient.jar debug".execute()
		println proc.text
		println "> killing server"
		//noinspection GroovyVariableNotAssigned
		serverProc.destroyForcibly()
		while (serverProc.isAlive()) {
			println " > waiting to kill..."
			SECONDS.sleep(1)
		}
	}
}
tasks.acceptanceTest.dependsOn "test", "build"
